function [best_attribute] = choose_best_decision_attribute(examples, attributes, binary_targets)

positive = length(binary_targets(binary_targets == 1));
negative = length(binary_targets(binary_targets == 0));
sum = length(binary_targets);
positive = sum(binary_targets);
negative = sum - 

original_gain = calculate_entropy(positive, negative);

gains = zeros(1, length(attributes));

for i = 1:length(attributes)
    if (attributes(i) == 0)
        gains(i) = -1;
    else
        positive_zero = 0;
        positive_one = 0;
        negative_zero = 0;
        negative_one = 0;
        
        for j = 1:length(binary_targets)
            if(examples(j,i) == 0 && binary_targets(j) == 1)
                positive_zero = positive_zero + 1;
            end 
            if(examples(j,i) == 1 && binary_targets(j) == 1)
                positive_one = positive_one + 1;
            end
            if(examples(j,i) == 0 && binary_targets(j) == 0)
                negative_zero = negative_zero + 1;
            end
            if(examples(j,i) == 1 && binary_targets(j) == 0)
                negative_one = negative_one + 1;
            end
        end
        
        gains(i) = calculate_gain(original_gain, sum, positive_zero, positive_one, negative_zero, negative_one);
    end
end

[~,best_attribute] = max(gains);

end


function [entropy] = calculate_entropy(positive, negative)

total = positive + negative;
positive_factor = positive / total;
negative_factor = negative / total;

%abs??
entropy = - positive_factor * log2(positive_factor) - negative_factor * log2(negative_factor);

end


function [gain] = calculate_gain(original_gain, sum, positive_zero, positive_one, negative_zero, negative_one)
    remainder = calculate_remainder(sum, positive_zero, positive_one, negative_zero, negative_one);
    gain = original_gain - remainder;
end


function [remainder] = calculate_remainder(sum, positive_zero, positive_one, negative_zero, negative_one)

zero = (positive_zero + negative_zero) / sum;
one  = (positive_one + negative_one) /sum;
remainder = zero * (calculate_entropy(positive_zero, negative_zero)) + one * (calculate_entropy(positive_one, negative_one));

end